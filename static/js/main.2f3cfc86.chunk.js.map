{"version":3,"sources":["Phaser/GameScene.js","Phaser/StartScene.js","Phaser/FinishScene.js","Phaser/OverScene.js","Comonents/Main.js","App.js","index.js"],"names":["snake","food","cursors","StartScene","this","load","html","text","add","color","fontSize","current","JSON","parse","localStorage","getItem","setText","name","element","dom","createFromCache","getChildByName","setAttribute","removeAttribute","console","log","getAttribute","addListener","on","e","target","value","length","event","setVisible","scene","manager","start","inputText","removeListener","objLocalStor","level","id","Date","now","setItem","stringify","Phaser","Scene","GameScene","stop","image","setTimeout","gameOver","scoreText","fill","Food","Class","Extends","GameObjects","Image","initialize","x","y","call","setTexture","setPosition","total","children","eat","Snake","headPosition","Geom","Point","body","group","head","create","setOrigin","alive","speed","moveTime","tail","grow","heading","direction","hitBody","Actions","GetFirst","entries","update","time","move","faceLeft","faceRight","faceUp","faceDown","Math","Wrap","ShiftPosition","getChildren","collideWithFood","updateGrid","grid","each","segment","bx","by","input","keyboard","createCursorKeys","delta","left","isDown","right","up","down","repositionFood","testGrid","validLocations","push","pos","RND","pick","FinishScene","data","bitmapFont","result","bitmapText","setTint","highScore","resultButton","startButton","saveResult","zone","width","originX","height","originY","setInteractive","once","axios","post","then","resp","catch","err","message","scores","OverScene","get","i","tween","targets","ease","k","duration","yoyo","repeat","alpha","Test","config","type","WEBGL","backgroundColor","createContainer","parent","Game","React","Component","App","Main","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f3cfc86.chunk.js","sourcesContent":["import Phaser from \"phaser\";\r\n\r\nlet snake;\r\nlet food;\r\nlet cursors;\r\n\r\nconst UP = 0;\r\nconst DOWN = 1;\r\nconst LEFT = 2;\r\nconst RIGHT = 3;\r\n\r\nexport default class GameScene extends Phaser.Scene {\r\n  constructor() {\r\n    super(\"Game\");\r\n  }\r\n\r\n  gameOver() {\r\n    this.scene.manager.stop(\"Game\");\r\n    this.scene.manager.start(\"FinishScene\", { snake, food });\r\n  }\r\n\r\n  preload() {\r\n    this.load.image(\"food\", \"assets/coin.png\");\r\n    this.load.image(\"body\", \"assets/player.png\");\r\n\r\n    setTimeout(() => this.gameOver(), 60000);\r\n  }\r\n\r\n  create() {\r\n    let scoreText;\r\n    scoreText = this.add.text(6, 6, \"0\", { fontSize: \"24px\", fill: \"#000\" });\r\n\r\n    let Food = new Phaser.Class({\r\n      Extends: Phaser.GameObjects.Image,\r\n\r\n      initialize: function Food(scene, x, y) {\r\n        Phaser.GameObjects.Image.call(this, scene);\r\n\r\n        this.setTexture(\"food\");\r\n        this.setPosition(x * 16, y * 16);\r\n\r\n        this.total = 0;\r\n\r\n        scene.children.add(this);\r\n      },\r\n\r\n      eat: function () {\r\n        this.total++;\r\n\r\n        scoreText.setText(this.total);\r\n      },\r\n    });\r\n\r\n    let Snake = new Phaser.Class({\r\n      initialize: function Snake(scene, x, y) {\r\n        this.headPosition = new Phaser.Geom.Point(x, y);\r\n\r\n        this.body = scene.add.group();\r\n\r\n        this.head = this.body.create(x * 16, y * 16, \"body\");\r\n        this.head.setOrigin(0);\r\n\r\n        this.alive = true;\r\n\r\n        this.speed = 300;\r\n\r\n        this.moveTime = 0;\r\n\r\n        this.tail = new Phaser.Geom.Point(x, y);\r\n\r\n        this.grow();\r\n        this.grow();\r\n\r\n        this.heading = RIGHT;\r\n        this.direction = RIGHT;\r\n      },\r\n\r\n      hitBody: function () {\r\n        return Phaser.Actions.GetFirst(\r\n          this.body.children.entries,\r\n          { x: this.head.x, y: this.head.y },\r\n          1,\r\n        );\r\n      },\r\n\r\n      update: function (time) {\r\n        if (time >= this.moveTime) {\r\n          return this.move(time);\r\n        }\r\n      },\r\n\r\n      faceLeft: function () {\r\n        if (this.direction === UP || this.direction === DOWN) {\r\n          this.heading = LEFT;\r\n        }\r\n      },\r\n\r\n      faceRight: function () {\r\n        if (this.direction === UP || this.direction === DOWN) {\r\n          this.heading = RIGHT;\r\n        }\r\n      },\r\n\r\n      faceUp: function () {\r\n        if (this.direction === LEFT || this.direction === RIGHT) {\r\n          this.heading = UP;\r\n        }\r\n      },\r\n\r\n      faceDown: function () {\r\n        if (this.direction === LEFT || this.direction === RIGHT) {\r\n          this.heading = DOWN;\r\n        }\r\n      },\r\n\r\n      move: function (time) {\r\n        if (this.hitBody()) {\r\n          this.alive = false;\r\n          return false;\r\n        }\r\n\r\n        switch (this.heading) {\r\n          case LEFT:\r\n            this.headPosition.x = Phaser.Math.Wrap(this.headPosition.x - 1, 0, 40);\r\n            break;\r\n\r\n          case RIGHT:\r\n            this.headPosition.x = Phaser.Math.Wrap(this.headPosition.x + 1, 0, 40);\r\n            break;\r\n\r\n          case UP:\r\n            this.headPosition.y = Phaser.Math.Wrap(this.headPosition.y - 1, 0, 30);\r\n            break;\r\n\r\n          case DOWN:\r\n            this.headPosition.y = Phaser.Math.Wrap(this.headPosition.y + 1, 0, 30);\r\n            break;\r\n          default:\r\n            console.log(\"Error\");\r\n        }\r\n\r\n        this.direction = this.heading;\r\n\r\n        Phaser.Actions.ShiftPosition(\r\n          this.body.getChildren(),\r\n          this.headPosition.x * 16,\r\n          this.headPosition.y * 16,\r\n          1,\r\n          this.tail,\r\n        );\r\n\r\n        this.moveTime = time + this.speed;\r\n\r\n        return true;\r\n      },\r\n\r\n      grow: function () {\r\n        let newPart = this.body.create(this.tail.x, this.tail.y, \"body\");\r\n\r\n        newPart.setOrigin(0);\r\n      },\r\n\r\n      collideWithFood: function (food) {\r\n        if (this.head.x === food.x && this.head.y === food.y) {\r\n          this.grow();\r\n\r\n          food.eat();\r\n\r\n          if (this.speed > 20 && food.total % 5 === 0) {\r\n            this.speed -= 5;\r\n          }\r\n\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n\r\n      updateGrid: function (grid) {\r\n        this.body.children.each(function (segment) {\r\n          let bx = segment.x / 16;\r\n          let by = segment.y / 16;\r\n\r\n          grid[by][bx] = false;\r\n        });\r\n\r\n        return grid;\r\n      },\r\n    });\r\n\r\n    food = new Food(this, 4, 4);\r\n\r\n    snake = new Snake(this, 8, 8);\r\n\r\n    cursors = this.input.keyboard.createCursorKeys();\r\n  }\r\n\r\n  update(time, delta) {\r\n    if (!snake.alive) {\r\n      this.scene.manager.stop(\"Game\");\r\n      this.scene.manager.start(\"FinishScene\");\r\n      return;\r\n    }\r\n\r\n    if (cursors.left.isDown) {\r\n      snake.faceLeft();\r\n    } else if (cursors.right.isDown) {\r\n      snake.faceRight();\r\n    } else if (cursors.up.isDown) {\r\n      snake.faceUp();\r\n    } else if (cursors.down.isDown) {\r\n      snake.faceDown();\r\n    }\r\n\r\n    if (snake.update(time)) {\r\n      if (snake.collideWithFood(food)) {\r\n        this.repositionFood();\r\n      }\r\n    }\r\n  }\r\n\r\n  repositionFood() {\r\n    let testGrid = [];\r\n\r\n    for (let y = 0; y < 30; y++) {\r\n      testGrid[y] = [];\r\n\r\n      for (let x = 0; x < 40; x++) {\r\n        testGrid[y][x] = true;\r\n      }\r\n    }\r\n\r\n    snake.updateGrid(testGrid);\r\n\r\n    let validLocations = [];\r\n\r\n    for (let y = 0; y < 30; y++) {\r\n      for (let x = 0; x < 40; x++) {\r\n        if (testGrid[y][x] === true) {\r\n          validLocations.push({ x: x, y: y });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validLocations.length > 0) {\r\n      let pos = Phaser.Math.RND.pick(validLocations);\r\n\r\n      food.setPosition(pos.x * 16, pos.y * 16);\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import Phaser from \"phaser\";\r\n\r\nexport default class StartScene extends Phaser.Scene {\r\n  constructor() {\r\n    super(\"Start\");\r\n  }\r\n\r\n  preload() {\r\n    // this.load.bitmapFont(\"arcade\", \"assets/arcade.png\", \"assets/arcade.xml\");\r\n    this.load.html(\"nameform\", \"assets/nameform.html\");\r\n\r\n    // let current = JSON.parse(localStorage.getItem(\"snake\"));\r\n  }\r\n\r\n  create() {\r\n    // this.add.bitmapText(10, 50, \"arcade\", \"RANK  SCORE   NAME\").setTint(0xffffff);\r\n    let text = this.add.text(130, 40, \"\", {\r\n      color: \"white\",\r\n      fontSize: \"30px \",\r\n    });\r\n\r\n    let current = JSON.parse(localStorage.getItem(\"snake\"));\r\n\r\n    if (current) {\r\n      text.setText(\"Welcome \" + current.name);\r\n    }\r\n    if (!current) {\r\n      text.setText(\"Please enter your name\");\r\n    }\r\n\r\n    var element = this.add.dom(300, 200).createFromCache(\"nameform\");\r\n\r\n    if (current) {\r\n      element.getChildByName(\"nameField\").setAttribute(\"hidden\", true);\r\n      element.getChildByName(\"playButton\").removeAttribute(\"disabled\");\r\n      console.log(element.getChildByName(\"nameField\").getAttribute(\"hidden\"));\r\n    }\r\n\r\n    element.addListener(\"click\");\r\n    element.addListener(\"input\");\r\n\r\n    element.on(\"input\", function (e) {\r\n      e.target.value.length > 1 && this.getChildByName(\"playButton\").removeAttribute(\"disabled\");\r\n    });\r\n\r\n    element.on(\"click\", function (event) {\r\n      if (element.getChildByName(\"nameField\").getAttribute(\"hidden\")) {\r\n        this.setVisible(false);\r\n        text.setText(\"\");\r\n        this.scene.scene.manager.start(\"Game\");\r\n        return;\r\n      }\r\n      if (event.target.name === \"playButton\") {\r\n        var inputText = this.getChildByName(\"nameField\");\r\n\r\n        //  Have they entered anything?\r\n        if (inputText.value !== \"\") {\r\n          //  Turn off the click events\r\n          this.removeListener(\"click\");\r\n\r\n          //  Hide the login element\r\n          this.setVisible(false);\r\n\r\n          //  Populate the text with whatever they typed in\r\n          let objLocalStor = { name: inputText.value, level: null, id: Date.now() };\r\n          localStorage.setItem(\"snake\", JSON.stringify(objLocalStor));\r\n          text.setText(\"\");\r\n          this.scene.scene.manager.start(\"Game\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import Phaser from \"phaser\";\r\nimport axios from \"axios\";\r\n\r\nexport default class FinishScene extends Phaser.Scene {\r\n  constructor() {\r\n    super(\"FinishScene\");\r\n  }\r\n\r\n  init(data) {\r\n    this.snake = data.snake;\r\n    this.food = data.food;\r\n  }\r\n\r\n  preload() {\r\n    this.load.bitmapFont(\"arcade\", \"assets/arcade.png\", \"assets/arcade.xml\");\r\n  }\r\n\r\n  create() {\r\n    let result = this.snake.alive && this.food.total > 0 ? \"Well Done\" : \"Game Over\";\r\n    this.add.bitmapText(160, 50, \"arcade\", result).setTint(0xffffff);\r\n\r\n    const highScore = this.add.bitmapText(480, 200, \"arcade\", \"highscore\", 20).setOrigin(0.5, 1);\r\n\r\n    let resultButton = this.snake.alive && this.food.total > 0 ? \"NExt level\" : \"Start Again\";\r\n    const startButton = this.add.bitmapText(160, 200, \"arcade\", resultButton, 20).setOrigin(0.5, 1);\r\n\r\n    const saveResult = this.add.bitmapText(300, 300, \"arcade\", \"save result\", 20).setOrigin(0.5, 1);\r\n\r\n    this.add\r\n      .zone(\r\n        saveResult.x - saveResult.width * saveResult.originX - 16,\r\n        saveResult.y - saveResult.height * saveResult.originY - 16,\r\n        saveResult.width + 32,\r\n        saveResult.height + 32,\r\n      )\r\n      .setOrigin(0, 0)\r\n      .setInteractive()\r\n      .once(\"pointerup\", () => {\r\n        let current = JSON.parse(localStorage.getItem(\"snake\"));\r\n        current.level = this.food.total;\r\n\r\n        delete current.id;\r\n\r\n        axios\r\n          .post(\"http://localhost:3004/add-users\", current)\r\n          .then(resp => {\r\n            this.scene.manager.stop(\"FinishScene\");\r\n            this.scene.manager.start(\"OverScene\");\r\n          })\r\n          .catch(err => console.log(err.message));\r\n      });\r\n\r\n    this.add\r\n      .zone(\r\n        startButton.x - startButton.width * startButton.originX - 16,\r\n        startButton.y - startButton.height * startButton.originY - 16,\r\n        startButton.width + 32,\r\n        startButton.height + 32,\r\n      )\r\n      .setOrigin(0, 0)\r\n      .setInteractive()\r\n      .once(\"pointerup\", () => {\r\n        this.scene.manager.stop(\"FinishScene\");\r\n        this.scene.manager.start(\"Game\");\r\n      });\r\n\r\n    this.add\r\n      .zone(\r\n        highScore.x - highScore.width * highScore.originX - 16,\r\n        highScore.y - highScore.height * highScore.originY - 16,\r\n        highScore.width + 32,\r\n        highScore.height + 32,\r\n      )\r\n      .setOrigin(0, 0)\r\n      .setInteractive()\r\n      .once(\"pointerup\", () => {\r\n        this.scene.manager.stop(\"FinishScene\");\r\n        this.scene.manager.start(\"OverScene\");\r\n      });\r\n\r\n    // $.ajax({\r\n    //   type: \"GET\",\r\n    //   url: \"/scores\",\r\n    //   success: function (data) {\r\n    //     game = new Phaser.Game(config);\r\n    //     scores = data;\r\n    //   },\r\n    //   error: function (xhr) {\r\n    //     console.log(xhr);\r\n    //   },\r\n    // });\r\n\r\n    // this.add.tween({\r\n    //   targets: [startButton],\r\n    //   ease: k => (k < 0.5 ? 0 : 1),\r\n    //   duration: 550,\r\n    //   yoyo: true,\r\n    //   repeat: -1,\r\n    //   alpha: 0,\r\n    // });\r\n  }\r\n}\r\n","import Phaser from \"phaser\";\r\nimport axios from \"axios\";\r\n\r\nlet best = [\r\n  { id: 12121, name: \"Bob\", level: 2 },\r\n  { id: 13345, name: \"Pit\", level: 3 },\r\n];\r\n\r\nlet game;\r\nlet scores = best;\r\nexport default class OverScene extends Phaser.Scene {\r\n  constructor() {\r\n    super(\"OverScene\");\r\n    this.scores = [];\r\n  }\r\n  preload() {\r\n    this.load.bitmapFont(\"arcade\", \"assets/arcade.png\", \"assets/arcade.xml\");\r\n  }\r\n  create() {\r\n    /////////////////////////////////////////////////////////////////\r\n    axios\r\n      .get(\"http://localhost:3004/get-users\", {})\r\n      .then(resp => {\r\n        console.log(resp.data);\r\n        scores = resp.data;\r\n        this.add.bitmapText(50, 50, \"arcade\", \"RANK SCORE NAME\").setTint(0xffffff);\r\n        for (let i = 1; i < 6; i++) {\r\n          if (scores[i - 1]) {\r\n            this.add\r\n              .bitmapText(\r\n                50,\r\n                100 + 50 * i,\r\n                \"arcade\",\r\n                ` ${i}    ${scores[i - 1].level}    ${scores[i - 1].name}`,\r\n              )\r\n              .setTint(0xffffff);\r\n          } else {\r\n            this.add.bitmapText(50, 100 + 50 * i, \"arcade\", ` ${i}    0    ---`).setTint(0xffffff);\r\n          }\r\n        }\r\n        // this.scene.manager.stop(\"FinishScene\");\r\n        // this.scene.manager.start(\"OverScene\");\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n        this.add.bitmapText(50, 50, \"arcade\", \"sever no connected \").setTint(0xffffff);\r\n      });\r\n\r\n    /////////////////////////////////////////////////////////////////\r\n\r\n    // this.add.bitmapText(50, 50, \"arcade\", \"RANK SCORE NAME\").setTint(0xffffff);\r\n    // for (let i = 1; i < 6; i++) {\r\n    //   if (scores[i - 1]) {\r\n    //     this.add\r\n    //       .bitmapText(\r\n    //         50,\r\n    //         100 + 50 * i,\r\n    //         \"arcade\",\r\n    //         ` ${i}    ${scores[i - 1].level}    ${scores[i - 1].name}`,\r\n    //       )\r\n    //       .setTint(0xffffff);\r\n    //   } else {\r\n    //     this.add.bitmapText(50, 100 + 50 * i, \"arcade\", ` ${i}    0    ---`).setTint(0xffffff);\r\n    //   }\r\n    // }\r\n\r\n    const startButton = this.add\r\n      .bitmapText(280, 450, \"arcade\", \"start again\", 20)\r\n      .setOrigin(0.5, 1);\r\n\r\n    this.add.tween({\r\n      targets: [startButton],\r\n      ease: k => (k < 0.5 ? 0 : 1),\r\n      duration: 450,\r\n      yoyo: true,\r\n      repeat: -1,\r\n      alpha: 0,\r\n    });\r\n\r\n    this.add\r\n      .zone(\r\n        startButton.x - startButton.width * startButton.originX - 16,\r\n        startButton.y - startButton.height * startButton.originY - 16,\r\n        startButton.width + 32,\r\n        startButton.height + 32,\r\n      )\r\n      .setOrigin(0, 0)\r\n      .setInteractive()\r\n      .once(\"pointerup\", () => {\r\n        this.scene.manager.stop(\"OverScene\");\r\n        this.scene.manager.start(\"Game\");\r\n      });\r\n  }\r\n}\r\n\r\n// let config = {\r\n//   type: Phaser.AUTO,\r\n//   parent: \"phaser-example\",\r\n//   width: 800,\r\n//   height: 600,\r\n//   pixelArt: true,\r\n//   scene: [Highscore],\r\n// };\r\n","import React from \"react\";\r\nimport Phaser from \"phaser\";\r\nimport StartScene from \"../Phaser/StartScene\";\r\nimport GameScene from \"../Phaser/GameScene\";\r\nimport FinishScene from \"../Phaser/FinishScene\";\r\nimport OverScene from \"../Phaser/OverScene\";\r\n\r\nclass Test extends React.Component {\r\n  componentDidMount() {\r\n    let config = {\r\n      type: Phaser.WEBGL,\r\n      width: 640,\r\n      height: 480,\r\n      backgroundColor: \"#bfcc88\",\r\n      dom: {\r\n        createContainer: true,\r\n      },\r\n      parent: \"phaser-example\",\r\n      scene: [StartScene, FinishScene, GameScene, OverScene],\r\n    };\r\n\r\n    new Phaser.Game(config);\r\n  }\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n  render() {\r\n    return <div id=\"phaser-game\"></div>;\r\n  }\r\n}\r\n\r\nexport default Test;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Redirect, Route } from \"react-router-dom\";\n\nimport Main from \"./Comonents/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\n// function App() {\n//   return (\n//     <BrowserRouter>\n//       <Switch>\n//         <Route path=\"/\" exact component={Main} />\n//         <Route path=\"/score\" component={() => <div>Score</div>} />\n//       </Switch>\n//     </BrowserRouter>\n//   );\n// }\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}